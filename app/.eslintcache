[{"/Users/Matt/github/note-taker/app/src/index.js":"1","/Users/Matt/github/note-taker/app/src/App.js":"2","/Users/Matt/github/note-taker/app/src/reportWebVitals.js":"3","/Users/Matt/github/note-taker/app/src/TextEditor/TextEditor.js":"4","/Users/Matt/github/note-taker/app/src/TextEditor/CustomElements/CustomElements.js":"5","/Users/Matt/github/note-taker/app/src/TextEditor/CustomLeaves/CustomLeaves.js":"6"},{"size":500,"mtime":1608244512808,"results":"7","hashOfConfig":"8"},{"size":396,"mtime":1608248949327,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608244512809,"results":"10","hashOfConfig":"8"},{"size":5979,"mtime":1608514293947,"results":"11","hashOfConfig":"8"},{"size":158,"mtime":1608246700782,"results":"12","hashOfConfig":"8"},{"size":275,"mtime":1608512400818,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"d17dz7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/Matt/github/note-taker/app/src/index.js",[],["29","30"],"/Users/Matt/github/note-taker/app/src/App.js",[],"/Users/Matt/github/note-taker/app/src/reportWebVitals.js",[],"/Users/Matt/github/note-taker/app/src/TextEditor/TextEditor.js",["31","32"],"// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback } from 'react'\n// Import the Slate editor factory.\nimport { createEditor } from 'slate'\nimport { Editor, Transforms, Text } from 'slate'\n\n// Import the Slate components and React plugin.\nimport { Slate, Editable, withReact } from 'slate-react'\n\n//CUSTOM ELEMENTS\nimport { CodeBlock } from './CustomElements/CustomElements.js'\nimport { Leaf } from './CustomLeaves/CustomLeaves.js'\n\n// Define our own custom set of helpers.\nconst CustomEditor = {\n  isBoldMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.bold === true,\n      universal: true,\n    })\n\n    return !!match\n  },\n\n  isCodeBlockActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.type === 'code',\n    })\n\n    return !!match\n  },\n\n  toggleBoldMark(editor) {\n    const isActive = CustomEditor.isBoldMarkActive(editor)\n    Transforms.setNodes(\n      editor,\n      { bold: isActive ? null : true },\n      { match: n => Text.isText(n), split: true }\n    )\n  },\n\n  toggleCodeBlock(editor) {\n    const isActive = CustomEditor.isCodeBlockActive(editor)\n    Transforms.setNodes(\n      editor,\n      { type: isActive ? null : 'code' },\n      { match: n => Editor.isBlock(editor, n) }\n    )\n  },\n}\n\n\n\nconst TextEditor = () => {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState([\n    {\n      type: 'paragraph',\n      children: [{ text: 'A line of text in a paragraph.' }],\n    },\n  ])\n\n  //FOR RENDERING CUSTOM BLOCKS\n  const DefaultElement = props => {\n    return <p {...props.attributes}>{props.children}</p>\n  }\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return <CodeBlock {...props} />\n      default:\n        return <DefaultElement {...props} />\n    }\n  }, [])\n\n  const renderLeaf = useCallback(props => {\n    return <Leaf {...props} />\n  }, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={event => {\n          let commandKey = event.ctrlKey || event.metaKey ? true : false\n          if (!commandKey) {\n            return\n          }\n\n          // Replace the `onKeyDown` logic with our new commands.\n          switch (event.key) {\n            case '`': {\n              event.preventDefault()\n              CustomEditor.toggleCodeBlock(editor)\n              break\n            }\n\n            case 'b': {\n              event.preventDefault()\n              CustomEditor.toggleBoldMark(editor)\n              break\n            }\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\n//\n// // Define our own custom set of helpers.\n// const CustomEditor = {\n//   isBoldMarkActive(editor) {\n//     const [match] = Editor.nodes(editor, {\n//       match: n => n.bold === true,\n//       universal: true,\n//     })\n//\n//     return !!match\n//   },\n//\n//   isCodeBlockActive(editor) {\n//     const [match] = Editor.nodes(editor, {\n//       match: n => n.type === 'code',\n//     })\n//\n//     return !!match\n//   },\n//\n//   toggleBoldMark(editor) {\n//     const isActive = CustomEditor.isBoldMarkActive(editor)\n//     Transforms.setNodes(\n//       editor,\n//       { bold: isActive ? null : true },\n//       { match: n => Text.isText(n), split: true }\n//     )\n//   },\n//\n//   toggleCodeBlock(editor) {\n//     const isActive = CustomEditor.isCodeBlockActive(editor)\n//     Transforms.setNodes(\n//       editor,\n//       { type: isActive ? null : 'code' },\n//       { match: n => Editor.isBlock(editor, n) }\n//     )\n//   },\n// }\n//\n//\n// const TextEditor = () => {\n//   const editor = useMemo(() => withReact(createEditor()), [])\n//   // Add the initial value when setting up our state.\n//   const [value, setValue] = useState([\n//     {\n//       type: 'paragraph',\n//       children: [{ text: 'A line of text in a paragraph.' }],\n//     },\n//   ])\n//\n//   useEffect(() => {\n//     if (!value) {\n//        //Transforms.deselect(editor);\n//        // or set selection to neutral state:\n//        editor.selection = { anchor: { path: [0,0], offset:0 }, focus: { path: [0,0], offset: 0 } }\n//        // Transforms.select(editor, {\n//        //   anchor: { path: [0, 0], offset: 0 },\n//        //   focus: { path: [0, 0], offset: 0 },\n//        // })\n//\n//     }\n//   }, [value]);\n//\n  // //FOR RENDERING CUSTOM BLOCKS\n  // const renderElement = useCallback(props => {\n  //   switch (props.element.type) {\n  //     case 'code':\n  //       return <CodeBlock {...props} />\n  //     default:\n  //       return <DefaultElement {...props} />\n  //   }\n  // }, [])\n//\n//   //FOR RENDERING CUSTOM LEAVES\n//   const renderLeaf = useCallback(props => {\n//     return <Leaf {...props} />\n//   }, [])\n//\n//   const DefaultElement = props => {\n//     return <p {...props.attributes}>{props.children}</p>\n//   }\n//\n//   return (\n//     <Slate\n//       editor={editor}\n//       value={value}\n//       onChange={newValue => setValue(newValue)}\n//\n//       style={{border: 'solid', width: '100%', height: '100%'}}\n//     >\n//     <Editable\n//       renderElement={renderElement}\n//       renderLeaf={renderLeaf}\n//\n//       onKeyDown={event => {\n//           let commandKey = event.ctrlKey || event.metaKey ? true : false\n//           if (!commandKey) {\n//             return\n//           } else {\n//             console.log(\"command issued \" + event.key)\n//             switch (event.key) {\n//               case '`': {\n//                 event.preventDefault()\n//                 CustomEditor.toggleCodeBlock(editor)\n//                 break\n//               }\n//\n//               case 'b': {\n//                 event.preventDefault()\n//                 CustomEditor.toggleBoldMark(editor)\n//                 break\n//               }\n//             }\n//           }\n//         }}\n//\n//     />\n//     </Slate>\n//   )\n// }\n\nexport default TextEditor\n","/Users/Matt/github/note-taker/app/src/TextEditor/CustomElements/CustomElements.js",[],"/Users/Matt/github/note-taker/app/src/TextEditor/CustomLeaves/CustomLeaves.js",[],["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":17,"nodeType":"41","messageId":"42","endLine":2,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":92,"column":11,"nodeType":"45","messageId":"46","endLine":104,"endColumn":12},{"ruleId":"35","replacedBy":"47"},{"ruleId":"37","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["49"],["50"],"no-global-assign","no-unsafe-negation"]